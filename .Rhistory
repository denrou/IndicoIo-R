library(indicoio)
text_tags("The Red Sox are the greatest team of all time!")
library(devtools)
install.packages("devtools")
http://www.rstudio.com/products/rpackages/devtools/
library(devtools)
devtools::install_github("IndicoDataSolutions/IndicoIo-R")
library(indicoio)
text_tags("The Red Sox are the greatest team of all time!")
indicoio.config.api_key = "YOUR_API_KEY"
indicoio.config.api_key = "b9ee441b57c23ac428417f7d0ca6b472"
text_tags("The Red Sox are the greatest team of all time!")
text_tags("The Red Sox are the greatest team of all time!", api_key="b9ee441b57c23ac428417f7d0ca6b472")
text_tags("The Red Sox are the greatest team of all time!", api_key="b9ee441b57c23ac428417f7d0ca6b472")
library(indicoio)
text_tags("The Red Sox are the greatest team of all time!", api_key="b9ee441b57c23ac428417f7d0ca6b472")
quit()
source("http://bioconductor.org/biocLite.R")
biocLite("EBImage")
quit()
library(devtools)
document()
install()
document()
install()
document()
install()
"aa" == TRUE
document()
install()
document()
install()
library(devtools)
x <- check()
cat(x$errors)
cat(x$warnings)
length("ahaha")
image_process <- function(data_pair) {
data_pair[1] = format_image(data_pair[[1]], 48)
data_pair
}
readPNG("tezt")
library(png)
readPNG("tezt")
img <- "test"
size <- 48
min_axis <- FALSE
if (typeof(img) == "list" || length(img) > 1) {
return(format_images(img, size));
}
if (is.character(img)) {
if (file.exists(img)) {
img <- readPNG(img)
} else { # is already base64
result <- try(readPNG(base64decode(img)), silent=TRUE)
if (class(result) == "try-error") {
return(img) # likely a url
} else {
img <- result;
}
} else {
stop("Only base64 encoded strings and filepaths are supported for image input.")
}
is.character(img)
file.exists(img)
result <- try(readPNG(base64decode(img)), silent=TRUE)
class(result)
img
library(devtools)
test()
document()
globalPath <- path.expand("~/.indicorc")
localPath <- file.path(getwd(), ".indicorc")
globalConfig <- readFile(globalPath)
readFile <- function(filepath) {
# Returns file content or FALSE if the path does not exist
if (!file.exists(filepath)) {
content <- FALSE
} else {
connection <- file(filepath)
content  <- readLines(connection)
if (content == "") {
content <- FALSE
}
close(connection)
}
content
}
globalConfig <- readFile(globalPath)
localConfig <- readFile(localPath)
globalConfig
localConfig
if (is.character(content)) {
config <- Parse.INI(content)
if (validAuthConfig(config)) {
.indicoio$api_key <- config$auth$api_key
}
if (validPrivateCloudConfig(config)) {
.indicoio$cloud <- config$private_cloud$cloud
}
content
content <- localConfig
if (is.character(content)) {
config <- Parse.INI(content)
if (validAuthConfig(config)) {
.indicoio$api_key <- config$auth$api_key
}
if (validPrivateCloudConfig(config)) {
.indicoio$cloud <- config$private_cloud$cloud
}
Lines <- content
Lines <- chartr("[]", "==", Lines)
connection <- textConnection(Lines)
d <- read.table(connection, as.is = TRUE, sep = "=", fill = TRUE)
close(connection)
L <- d$V1 == ""
d <- subset(transform(d, V3 = V2[which(L)[cumsum(L)]])[1:3],
V1 != "")
Lines
connection
d
L
transform(d, V3 = V2[which(L)[cumsum(L)]])
d
?transform
d$V2
Lines
?chartr
Lines <- content
Lines <- chartr("[]", "==", Lines)
connection <- textConnection(Lines)
d <- read.table(connection, as.is = TRUE, sep = "=", fill = TRUE)
close(connection)
L <- d$V1 == ""
d <- subset(transform(d, V3 = V2[which(L)[cumsum(L)]])[1:3],
V1 != "")
d
localPath <- file.path(getwd(), ".indicorc")
localConfig <- readFile(localPath)
loadConfigFile(localConfig)
content <- localConfig
Lines <- content
Lines <- chartr("[]", "==", Lines)
connection <- textConnection(Lines)
d <- read.table(connection, as.is = TRUE, sep = "=", fill = TRUE)
close(connection)
L <- d$V1 == ""
d <- subset(transform(d, V3 = V2[which(L)[cumsum(L)]])[1:3],
V1 != "")
value <- sprintf("'%s'", trim(d$V2))
document()
install()
test()
test_string <- "unit_test_collection"
alternate_name <- "alterate_unit_test_collection"
test_data <- list(list("I love my friends!", "extrovert"),
list("I love to be alone", "introvert"),
list("I have mixed feelings on people", "ambivert"))
test_image_data <- list(list('image/image.png', .5), list('image/not_square.png', 1.5))
clearTests <- function(collection) {
try({
deregister(collection)
}, silent=TRUE)
try({
clear(collection)
}, silent=TRUE)
}
collection <- Collection(name=test_string)
clearTests(collection)
addData(collection, test_data)
library(indicoio)
indicoio:::.indicoio
indicoio:::.indicoio$api_key
# Creates new environment for the package
if (!exists(".indicoio")) {
.indicoio <- new.env()
}
.onAttach <- function(libname, pkgname) {
# Shows welcome message
packageStartupMessage("\n========================================================\nindicoio: A simple R wrapper for the indico set of APIs \nFind more at: http://indico.io\n========================================================\n")
}
.onLoad <- function(libname, pkgname) {
# Sets package-wide variables
if (exists(".indicoio")) {
.indicoio$header <- c("Content-type" = "application/json",
"Accept" = "application/json",
"client-lib" = "R",
"version-number" = "0.10.4")
.indicoio$remote_api <- "https://apiv2.indico.io/"
.indicoio$private_cloud <- FALSE
.indicoio$api_key = FALSE
.indicoio$cloud = FALSE
# Paths to search for config files
loadConfiguration()
}
loadConfiguration <- function() {
# Load configuration from files and env variables
globalPath <- path.expand("~/.indicorc")
localPath <- file.path(getwd(), ".indicorc")
globalConfig <- readFile(globalPath)
localConfig <- readFile(localPath)
loadConfigFile(globalConfig)
loadConfigFile(localConfig)
loadEnvironmentVars()
}
loadEnvironmentVars <- function() {
# Load auth from environment variables
authDefined <- (Sys.getenv("INDICO_API_KEY") != FALSE)
if (authDefined) {
.indicoio$api_key <- Sys.getenv("INDICO_API_KEY")
}
# Load subdomain from environment variables
cloudDefined <- (Sys.getenv("INDICO_CLOUD") != FALSE)
if (cloudDefined) {
.indicoio$cloud <- Sys.getenv("INDICO_CLOUD")
}
readFile <- function(filepath) {
# Returns file content or FALSE if the path does not exist
if (!file.exists(filepath)) {
content <- FALSE
} else {
connection <- file(filepath)
content  <- readLines(connection)
if (content == "") {
content <- FALSE
}
close(connection)
}
content
}
loadConfigFile <- function(content) {
# Load from global configuration file
if (is.character(content)) {
config <- Parse.INI(content)
if (validAuthConfig(config)) {
.indicoio$api_key <- config$auth$api_key
}
if (validPrivateCloudConfig(config)) {
.indicoio$cloud <- config$private_cloud$cloud
}
validAuthConfig <- function(config) {
# ensure .ini file contains the proper fields
return (("auth" %in% names(config)) &&
("api_key" %in% names(config[['auth']])))
}
validPrivateCloudConfig <- function(config) {
# ensure .ini file contains the proper fields
return (("private_cloud" %in% names(config)) &&
("cloud" %in% names(config[['private_cloud']])))
}
trim <- function (x) {
gsub("^\\s+|\\s+$", "", x)
}
Parse.INI <- function(Lines)
{
# Parse .ini style configuration files (.indicorc)
# change section headers
Lines <- chartr("[]", "==", Lines)
connection <- textConnection(Lines)
d <- read.table(connection, as.is = TRUE, sep = "=", fill = TRUE)
close(connection)
# location of section breaks
L <- d$V1 == ""
d <- subset(transform(d, V3 = V2[which(L)[cumsum(L)]])[1:3],
V1 != "")
value <- sprintf("'%s'", trim(d$V2))
ToParse <- paste("INI.list$", d$V3, "$",  d$V1, " <- ", value, sep="")
INI.list <- list()
eval(parse(text=ToParse))
return(INI.list)
}
localPath <- file.path(getwd(), ".indicorc")
globalConfig <- readFile(globalPath)
localConfig <- readFile(localPath)
loadConfigFile(globalConfig)
loadConfigFile(localConfig)
.indicoio$api_key
loadEnvironmentVars()
.indicoio$api_key
Sys.getenv("INDICO_API_KEY")
document()
library(devtools)
document()
install()
test()
%$%
`%$%``
`%$%`
library(magrittr)
`%$%`
indicoio:::.indicoio$api_key
library(indicoio)
test_string <- "unit_test_collection"
alternate_name <- "alterate_unit_test_collection"
test_data <- list(list("I love my friends!", "extrovert"),
list("I love to be alone", "introvert"),
list("I have mixed feelings on people", "ambivert"))
test_image_data <- list(list('image/image.png', .5), list('image/not_square.png', 1.5))
clearTests <- function(collection) {
try({
deregister(collection)
}, silent=TRUE)
try({
clear(collection)
}, silent=TRUE)
}
collection <- Collection(name=test_string)
clearTests(collection)
addData(collection, test_data)
addData(collection, list("I love my friends!", "extrovert"))
train(collection)
wait(collection)
prediction <- predict(collection, "I love my friends!")
expect_equal(prediction[["extrovert"]] > .5, TRUE)
library(testthat)
expect_equal(prediction[["extrovert"]] > .5, TRUE)
prediction <- predict(collection, list("I love my friends!", "I love to be alone"))
expect_true(prediction[[1]][["extrovert"]] > prediction[[2]][["extrovert"]])
clearTests(collection)
test_image <- paste(readLines("image/base64.txt"), collapse=" ")
test_image <- paste(readLines("tests/testthat/image/base64.txt"), collapse=" ")
probability <- content_filtering(test_image)
expect_is(probability, "numeric")
expect_more_than(.5, probability)
library(magrittr)
extract2
list(a = 2)
l <- list(a = 2)
l %>% extract2("a")
library(devtools)
document()
# Creates new environment for the package
if (!exists(".indicoio")) {
.indicoio <- new.env()
}
.onAttach <- function(libname, pkgname) {
# Shows welcome message
packageStartupMessage("\n========================================================\nindicoio: A simple R wrapper for the indico set of APIs \nFind more at: http://indico.io\n========================================================\n")
}
.onLoad <- function(libname, pkgname) {
# Sets package-wide variables
if (exists(".indicoio")) {
.indicoio$header <- c("Content-type" = "application/json",
"Accept" = "application/json",
"client-lib" = "R",
"version-number" = "0.10.4")
.indicoio$remote_api <- "https://apiv2.indico.io/"
.indicoio$private_cloud <- FALSE
.indicoio$api_key = FALSE
.indicoio$cloud = FALSE
# Paths to search for config files
loadConfiguration()
}
loadConfiguration <- function() {
# Load configuration from files and env variables
globalPath <- path.expand("~/.indicorc")
localPath <- file.path(getwd(), ".indicorc")
globalConfig <- readFile(globalPath)
localConfig <- readFile(localPath)
loadConfigFile(globalConfig)
loadConfigFile(localConfig)
loadEnvironmentVars()
}
loadEnvironmentVars <- function() {
# Load auth from environment variables
authDefined <- (Sys.getenv("INDICO_API_KEY") != "")
if (authDefined) {
.indicoio$api_key <- Sys.getenv("INDICO_API_KEY")
}
# Load subdomain from environment variables
cloudDefined <- (Sys.getenv("INDICO_CLOUD") != "")
if (cloudDefined) {
.indicoio$cloud <- Sys.getenv("INDICO_CLOUD")
}
readFile <- function(filepath) {
# Returns file content or FALSE if the path does not exist
if (!file.exists(filepath)) {
content <- FALSE
} else {
connection <- file(filepath)
content  <- readLines(connection)
if (content == "") {
content <- FALSE
}
close(connection)
}
content
}
loadConfigFile <- function(content) {
# Load from global configuration file
if (is.character(content)) {
config <- Parse.INI(content)
if (validAuthConfig(config)) {
.indicoio$api_key <- config$auth$api_key
}
if (validPrivateCloudConfig(config)) {
.indicoio$cloud <- config$private_cloud$cloud
}
validAuthConfig <- function(config) {
# ensure .ini file contains the proper fields
return (("auth" %in% names(config)) &&
("api_key" %in% names(config[['auth']])))
}
validPrivateCloudConfig <- function(config) {
# ensure .ini file contains the proper fields
return (("private_cloud" %in% names(config)) &&
("cloud" %in% names(config[['private_cloud']])))
}
trim <- function (x) {
gsub("^\\s+|\\s+$", "", x)
}
Parse.INI <- function(Lines)
{
# Parse .ini style configuration files (.indicorc)
# change section headers
Lines <- chartr("[]", "==", Lines)
connection <- textConnection(Lines)
d <- read.table(connection, as.is = TRUE, sep = "=", fill = TRUE)
close(connection)
# location of section breaks
L <- d$V1 == ""
d <- subset(transform(d, V3 = V2[which(L)[cumsum(L)]])[1:3],
V1 != "")
value <- sprintf("'%s'", trim(d$V2))
ToParse <- paste("INI.list$", d$V3, "$",  d$V1, " <- ", value, sep="")
INI.list <- list()
eval(parse(text=ToParse))
return(INI.list)
}
globalPath <- path.expand("~/.indicorc")
localPath <- file.path(getwd(), ".indicorc")
globalConfig <- readFile(globalPath)
localConfig <- readFile(localPath)
localPath
filePath <- localPath
connection <- file(filepath)
filepath <- localPath
connection <- file(filepath)
content  <- readLines(connection)
content
connection(file("test"))
connection <- file("test")
content  <- readLines(connection)
content
document()
library(indicoio)
library(dtptools)
findr("content ==")
findr("content")
document()
library(devtools)
document()
install()
library(indicoio)
x <- check()
library(devtools)
x <- check()
cat(x$errors)
indicoio:::.indicoio$api_key
cat(x$warnings)
?read.table
findr("intersection")
library(dtptools)
findr("intersection")
cat(x$notes)
?cat
cat("a", "a")
document()
install()
x <- check()
cat(x$errors)
cat(x$warnings)
cat(x$notes)
?methods
